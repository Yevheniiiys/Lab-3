using System;
using System.Collections.Generic;

public abstract class Computer
{
    public string IpAddress { get; set; }
    public string OsType { get; set; }

    public Computer(string ipAddress, string osType)
    {
        IpAddress = ipAddress;
        OsType = osType;
    }

    public override string ToString()
    {
        return "IP: " + IpAddress + ", ОС: " + OsType;
    }
}

public class Server : Computer, IConnectable
{
    public double StorageCapacity { get; set; }

    public Server(string ipAddress, string osType, double storageCapacity)
        : base(ipAddress, osType)
    {
        StorageCapacity = storageCapacity;
    }

    public void Connect(Computer otherDevice)
    {
        Console.WriteLine(IpAddress + " підключився до " + otherDevice.IpAddress);
    }

    public void SendData(string data, Computer receiver)
    {
        Console.WriteLine(IpAddress + " передає дані: '" + data + "' до " + receiver.IpAddress);
    }

    public void ReceiveData(string data, Computer sender)
    {
        Console.WriteLine(IpAddress + " отримав дані: '" + data + "' від " + sender.IpAddress);
    }
}

public class WorkStation : Computer, IConnectable
{
    public string GraphicsCard { get; set; }

    public WorkStation(string ipAddress, string osType, string graphicsCard)
        : base(ipAddress, osType)
    {
        GraphicsCard = graphicsCard;
    }

    public void Connect(Computer otherDevice)
    {
        Console.WriteLine(IpAddress + " підключився до " + otherDevice.IpAddress);
    }

    public void SendData(string data, Computer receiver)
    {
        Console.WriteLine(IpAddress + " передає дані: '" + data + "' до " + receiver.IpAddress);
    }

    public void ReceiveData(string data, Computer sender)
    {
        Console.WriteLine(IpAddress + " отримав дані: '" + data + "' від " + sender.IpAddress);
    }
}

public class Router : Computer, IConnectable
{
    public string RoutingProtocol { get; set; }

    public Router(string ipAddress, string osType, string routingProtocol)
        : base(ipAddress, osType)
    {
        RoutingProtocol = routingProtocol;
    }

    public void Connect(Computer otherDevice)
    {
        Console.WriteLine(IpAddress + " підключився до " + otherDevice.IpAddress);
    }

    public void SendData(string data, Computer receiver)
    {
        Console.WriteLine(IpAddress + " передає дані: '" + data + "' до " + receiver.IpAddress);
    }

    public void ReceiveData(string data, Computer sender)
    {
        Console.WriteLine(IpAddress + " отримав дані: '" + data + "' від " + sender.IpAddress);
    }
}

public interface IConnectable
{
    void Connect(Computer otherDevice);
    void SendData(string data, Computer receiver);
    void ReceiveData(string data, Computer sender);
}

public class Network
{
    private List<IConnectable> devices = new List<IConnectable>();

    public void AddDevice(IConnectable device)
    {
        devices.Add(device);
    }

    public void ShowDevices()
    {
        Console.WriteLine("\nДоступні пристрої:");
        for (int i = 0; i < devices.Count; i++)
            Console.WriteLine((i + 1) + ". " + devices[i]);
    }

    public void TransmitData(int senderIndex, int receiverIndex, string data)
    {
        IConnectable sender = devices[senderIndex];
        IConnectable receiver = devices[receiverIndex];
        sender.SendData(data, receiver as Computer);
        receiver.ReceiveData(data, sender as Computer);
    }
}

public class Program
{
    public static void Main()
    {
        var network = new Network();
        bool running = true;

        while (running)
        {
            Console.WriteLine("\nМеню:\n1. Додати пристрій\n2. Показати пристрої\n3. Підключити пристрої\n4. Вийти");
            Console.Write("Виберіть опцію: ");
            int choice = int.Parse(Console.ReadLine());

            switch (choice)
            {
                case 1: AddDevice(network); break;
                case 2: network.ShowDevices(); break;
                case 3: ConnectDevices(network); break;
                case 4: running = false; break;
                default: Console.WriteLine("Невірний вибір."); break;
            }
        }
    }

    private static void AddDevice(Network network)
    {
        Console.WriteLine("\n1. Сервер\n2. Робоча станція\n3. Маршрутизатор");
        Console.Write("Виберіть тип пристрою: ");
        int deviceType = int.Parse(Console.ReadLine());

        Console.Write("Введіть IP-адресу: ");
        string ip = Console.ReadLine();
        Console.Write("Введіть тип ОС: ");
        string os = Console.ReadLine();

        if (deviceType == 1)
        {
            Console.Write("Введіть ємність сховища (ТБ): ");
            double storage = double.Parse(Console.ReadLine());
            network.AddDevice(new Server(ip, os, storage));
        }
        else if (deviceType == 2)
        {
            Console.Write("Введіть модель відеокарти: ");
            string graphics = Console.ReadLine();
            network.AddDevice(new WorkStation(ip, os, graphics));
        }
        else
        {
            Console.Write("Введіть протокол маршрутизації: ");
            string protocol = Console.ReadLine();
            network.AddDevice(new Router(ip, os, protocol));
        }
    }

    private static void ConnectDevices(Network network)
    {
        network.ShowDevices();
        Console.Write("\nВиберіть пристрій відправника (номер): ");
        int senderIndex = int.Parse(Console.ReadLine()) - 1;
        Console.Write("Виберіть пристрій отримувача (номер): ");
        int receiverIndex = int.Parse(Console.ReadLine()) - 1;

        Console.Write("Введіть дані для передачі: ");
        string data = Console.ReadLine();

        network.TransmitData(senderIndex, receiverIndex, data);
    }
}
